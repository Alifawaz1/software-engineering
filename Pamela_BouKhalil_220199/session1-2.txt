Software engineering is all about building a good software. However a good software should satisfy three requirements:
1)A software delivered on time to the customer 
2) with all the required features
3)Completed within the budget
However we should always ask ourselves about the accuracy of the results, how much the software is robust and if it answers the needs.
After commiting the software to the customer the key to keep a software  up and running is its maintenance.
For example: No Man's Sky game was launched with lots of bugs but its maintenance made it gain success.
However another game like RedFall was launched with bugs. However the lack of maintenance made it reach a point of failure.
In Software engineering, people involved in production need to collaborate together: this is the purpose of version control systems. Like git, it's a tool that helps with manging the code and create a collaboration within the software team.
There are two types of version control system (vcs): Centralized and distributed.
A centralized vcs consists of one central server. The client will get the latest code versions from that server. When making chnages, they will be committed and merged to that same server. However if the server is down no one can work. There will be a single point of failure.
A Distributed vcs consists of  on central server and each client has a copy of it on their local machine. The changes done are saved on theocal repository and once done they can be merged on the central one. In case the server is down there is no problem snapshots of the history of changes and the code can be sent.
Git is an example of vcs: It can be used either on the cmd (most flexible and powerful) or on code Editors or GUIs (better to see the history).
Some commands to use while using git:
git add file.txt //in case we added a file in this case the files are untracked they need to be committed
git commit -m "write a messsage that will be shown in the history logs"
git status //to check if the changes are tracked
git log // to check the history 
Branching is a feature where we create a sperate branch to work on. However when it comes to merging the main branch to the local one sometimes we encounter some nerging conflicts. For example when the same line of code was modified by two people what changes will git take? Here comes the conflict which results in the statement written by Git.

Process Models: 
They are phases that a software moves through.
Each phase has its own activity. This is what we call the SDLC" Software Development Life Cycle
There are two types of models: -Linear models and Iterative models
--Linear models are sequential : we can't move backwards in phases. This model is not adaptable to change and cannot address changes easily. An example of linear model is the V model: The client 
has no feedback until the end of the development phase.
Another example of a linear model is the sawtooth model. Here the client can review the prototypes 
of the project
--Iterative models 
